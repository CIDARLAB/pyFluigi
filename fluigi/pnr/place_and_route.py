# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _place_and_route
else:
    import _place_and_route

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (
        self.__class__.__module__,
        self.__class__.__name__,
        strthis,
    )


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)

    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)

    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""

    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())

    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""

    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr
    __swig_destroy__ = _place_and_route.delete_SwigPyIterator

    def value(self):
        return _place_and_route.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _place_and_route.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _place_and_route.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _place_and_route.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _place_and_route.SwigPyIterator_equal(self, x)

    def copy(self):
        return _place_and_route.SwigPyIterator_copy(self)

    def next(self):
        return _place_and_route.SwigPyIterator_next(self)

    def __next__(self):
        return _place_and_route.SwigPyIterator___next__(self)

    def previous(self):
        return _place_and_route.SwigPyIterator_previous(self)

    def advance(self, n):
        return _place_and_route.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _place_and_route.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _place_and_route.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _place_and_route.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _place_and_route.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _place_and_route.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _place_and_route.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self


# Register SwigPyIterator in _place_and_route:
_place_and_route.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _place_and_route.SHARED_PTR_DISOWN


class PortVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.PortVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.PortVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.PortVector___bool__(self)

    def __len__(self):
        return _place_and_route.PortVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.PortVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.PortVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.PortVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.PortVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.PortVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.PortVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.PortVector_pop(self)

    def append(self, x):
        return _place_and_route.PortVector_append(self, x)

    def empty(self):
        return _place_and_route.PortVector_empty(self)

    def size(self):
        return _place_and_route.PortVector_size(self)

    def swap(self, v):
        return _place_and_route.PortVector_swap(self, v)

    def begin(self):
        return _place_and_route.PortVector_begin(self)

    def end(self):
        return _place_and_route.PortVector_end(self)

    def rbegin(self):
        return _place_and_route.PortVector_rbegin(self)

    def rend(self):
        return _place_and_route.PortVector_rend(self)

    def clear(self):
        return _place_and_route.PortVector_clear(self)

    def get_allocator(self):
        return _place_and_route.PortVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.PortVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.PortVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.PortVector_swiginit(
            self, _place_and_route.new_PortVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.PortVector_push_back(self, x)

    def front(self):
        return _place_and_route.PortVector_front(self)

    def back(self):
        return _place_and_route.PortVector_back(self)

    def assign(self, n, x):
        return _place_and_route.PortVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.PortVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.PortVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.PortVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.PortVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_PortVector


# Register PortVector in _place_and_route:
_place_and_route.PortVector_swigregister(PortVector)


class PlacementCellVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.PlacementCellVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.PlacementCellVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.PlacementCellVector___bool__(self)

    def __len__(self):
        return _place_and_route.PlacementCellVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.PlacementCellVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.PlacementCellVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.PlacementCellVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.PlacementCellVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.PlacementCellVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.PlacementCellVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.PlacementCellVector_pop(self)

    def append(self, x):
        return _place_and_route.PlacementCellVector_append(self, x)

    def empty(self):
        return _place_and_route.PlacementCellVector_empty(self)

    def size(self):
        return _place_and_route.PlacementCellVector_size(self)

    def swap(self, v):
        return _place_and_route.PlacementCellVector_swap(self, v)

    def begin(self):
        return _place_and_route.PlacementCellVector_begin(self)

    def end(self):
        return _place_and_route.PlacementCellVector_end(self)

    def rbegin(self):
        return _place_and_route.PlacementCellVector_rbegin(self)

    def rend(self):
        return _place_and_route.PlacementCellVector_rend(self)

    def clear(self):
        return _place_and_route.PlacementCellVector_clear(self)

    def get_allocator(self):
        return _place_and_route.PlacementCellVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.PlacementCellVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.PlacementCellVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.PlacementCellVector_swiginit(
            self, _place_and_route.new_PlacementCellVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.PlacementCellVector_push_back(self, x)

    def front(self):
        return _place_and_route.PlacementCellVector_front(self)

    def back(self):
        return _place_and_route.PlacementCellVector_back(self)

    def assign(self, n, x):
        return _place_and_route.PlacementCellVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.PlacementCellVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.PlacementCellVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.PlacementCellVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.PlacementCellVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_PlacementCellVector


# Register PlacementCellVector in _place_and_route:
_place_and_route.PlacementCellVector_swigregister(PlacementCellVector)


class PortPointerVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.PortPointerVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.PortPointerVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.PortPointerVector___bool__(self)

    def __len__(self):
        return _place_and_route.PortPointerVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.PortPointerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.PortPointerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.PortPointerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.PortPointerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.PortPointerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.PortPointerVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.PortPointerVector_pop(self)

    def append(self, x):
        return _place_and_route.PortPointerVector_append(self, x)

    def empty(self):
        return _place_and_route.PortPointerVector_empty(self)

    def size(self):
        return _place_and_route.PortPointerVector_size(self)

    def swap(self, v):
        return _place_and_route.PortPointerVector_swap(self, v)

    def begin(self):
        return _place_and_route.PortPointerVector_begin(self)

    def end(self):
        return _place_and_route.PortPointerVector_end(self)

    def rbegin(self):
        return _place_and_route.PortPointerVector_rbegin(self)

    def rend(self):
        return _place_and_route.PortPointerVector_rend(self)

    def clear(self):
        return _place_and_route.PortPointerVector_clear(self)

    def get_allocator(self):
        return _place_and_route.PortPointerVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.PortPointerVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.PortPointerVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.PortPointerVector_swiginit(
            self, _place_and_route.new_PortPointerVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.PortPointerVector_push_back(self, x)

    def front(self):
        return _place_and_route.PortPointerVector_front(self)

    def back(self):
        return _place_and_route.PortPointerVector_back(self)

    def assign(self, n, x):
        return _place_and_route.PortPointerVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.PortPointerVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.PortPointerVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.PortPointerVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.PortPointerVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_PortPointerVector


# Register PortPointerVector in _place_and_route:
_place_and_route.PortPointerVector_swigregister(PortPointerVector)


class PlacementCellPointerVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.PlacementCellPointerVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.PlacementCellPointerVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.PlacementCellPointerVector___bool__(self)

    def __len__(self):
        return _place_and_route.PlacementCellPointerVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.PlacementCellPointerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.PlacementCellPointerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.PlacementCellPointerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.PlacementCellPointerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.PlacementCellPointerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.PlacementCellPointerVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.PlacementCellPointerVector_pop(self)

    def append(self, x):
        return _place_and_route.PlacementCellPointerVector_append(self, x)

    def empty(self):
        return _place_and_route.PlacementCellPointerVector_empty(self)

    def size(self):
        return _place_and_route.PlacementCellPointerVector_size(self)

    def swap(self, v):
        return _place_and_route.PlacementCellPointerVector_swap(self, v)

    def begin(self):
        return _place_and_route.PlacementCellPointerVector_begin(self)

    def end(self):
        return _place_and_route.PlacementCellPointerVector_end(self)

    def rbegin(self):
        return _place_and_route.PlacementCellPointerVector_rbegin(self)

    def rend(self):
        return _place_and_route.PlacementCellPointerVector_rend(self)

    def clear(self):
        return _place_and_route.PlacementCellPointerVector_clear(self)

    def get_allocator(self):
        return _place_and_route.PlacementCellPointerVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.PlacementCellPointerVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.PlacementCellPointerVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.PlacementCellPointerVector_swiginit(
            self, _place_and_route.new_PlacementCellPointerVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.PlacementCellPointerVector_push_back(self, x)

    def front(self):
        return _place_and_route.PlacementCellPointerVector_front(self)

    def back(self):
        return _place_and_route.PlacementCellPointerVector_back(self)

    def assign(self, n, x):
        return _place_and_route.PlacementCellPointerVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.PlacementCellPointerVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.PlacementCellPointerVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.PlacementCellPointerVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.PlacementCellPointerVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_PlacementCellPointerVector


# Register PlacementCellPointerVector in _place_and_route:
_place_and_route.PlacementCellPointerVector_swigregister(PlacementCellPointerVector)


class NetPointerVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.NetPointerVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.NetPointerVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.NetPointerVector___bool__(self)

    def __len__(self):
        return _place_and_route.NetPointerVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.NetPointerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.NetPointerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.NetPointerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.NetPointerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.NetPointerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.NetPointerVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.NetPointerVector_pop(self)

    def append(self, x):
        return _place_and_route.NetPointerVector_append(self, x)

    def empty(self):
        return _place_and_route.NetPointerVector_empty(self)

    def size(self):
        return _place_and_route.NetPointerVector_size(self)

    def swap(self, v):
        return _place_and_route.NetPointerVector_swap(self, v)

    def begin(self):
        return _place_and_route.NetPointerVector_begin(self)

    def end(self):
        return _place_and_route.NetPointerVector_end(self)

    def rbegin(self):
        return _place_and_route.NetPointerVector_rbegin(self)

    def rend(self):
        return _place_and_route.NetPointerVector_rend(self)

    def clear(self):
        return _place_and_route.NetPointerVector_clear(self)

    def get_allocator(self):
        return _place_and_route.NetPointerVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.NetPointerVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.NetPointerVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.NetPointerVector_swiginit(
            self, _place_and_route.new_NetPointerVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.NetPointerVector_push_back(self, x)

    def front(self):
        return _place_and_route.NetPointerVector_front(self)

    def back(self):
        return _place_and_route.NetPointerVector_back(self)

    def assign(self, n, x):
        return _place_and_route.NetPointerVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.NetPointerVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.NetPointerVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.NetPointerVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.NetPointerVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_NetPointerVector


# Register NetPointerVector in _place_and_route:
_place_and_route.NetPointerVector_swigregister(NetPointerVector)


class ConstraintPointerVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.ConstraintPointerVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.ConstraintPointerVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.ConstraintPointerVector___bool__(self)

    def __len__(self):
        return _place_and_route.ConstraintPointerVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.ConstraintPointerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.ConstraintPointerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.ConstraintPointerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.ConstraintPointerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.ConstraintPointerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.ConstraintPointerVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.ConstraintPointerVector_pop(self)

    def append(self, x):
        return _place_and_route.ConstraintPointerVector_append(self, x)

    def empty(self):
        return _place_and_route.ConstraintPointerVector_empty(self)

    def size(self):
        return _place_and_route.ConstraintPointerVector_size(self)

    def swap(self, v):
        return _place_and_route.ConstraintPointerVector_swap(self, v)

    def begin(self):
        return _place_and_route.ConstraintPointerVector_begin(self)

    def end(self):
        return _place_and_route.ConstraintPointerVector_end(self)

    def rbegin(self):
        return _place_and_route.ConstraintPointerVector_rbegin(self)

    def rend(self):
        return _place_and_route.ConstraintPointerVector_rend(self)

    def clear(self):
        return _place_and_route.ConstraintPointerVector_clear(self)

    def get_allocator(self):
        return _place_and_route.ConstraintPointerVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.ConstraintPointerVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.ConstraintPointerVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.ConstraintPointerVector_swiginit(
            self, _place_and_route.new_ConstraintPointerVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.ConstraintPointerVector_push_back(self, x)

    def front(self):
        return _place_and_route.ConstraintPointerVector_front(self)

    def back(self):
        return _place_and_route.ConstraintPointerVector_back(self)

    def assign(self, n, x):
        return _place_and_route.ConstraintPointerVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.ConstraintPointerVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.ConstraintPointerVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.ConstraintPointerVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.ConstraintPointerVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_ConstraintPointerVector


# Register ConstraintPointerVector in _place_and_route:
_place_and_route.ConstraintPointerVector_swigregister(ConstraintPointerVector)


class PlacementCellGroups(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.PlacementCellGroups_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.PlacementCellGroups___nonzero__(self)

    def __bool__(self):
        return _place_and_route.PlacementCellGroups___bool__(self)

    def __len__(self):
        return _place_and_route.PlacementCellGroups___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.PlacementCellGroups___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.PlacementCellGroups___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.PlacementCellGroups___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.PlacementCellGroups___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.PlacementCellGroups___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.PlacementCellGroups___setitem__(self, *args)

    def pop(self):
        return _place_and_route.PlacementCellGroups_pop(self)

    def append(self, x):
        return _place_and_route.PlacementCellGroups_append(self, x)

    def empty(self):
        return _place_and_route.PlacementCellGroups_empty(self)

    def size(self):
        return _place_and_route.PlacementCellGroups_size(self)

    def swap(self, v):
        return _place_and_route.PlacementCellGroups_swap(self, v)

    def begin(self):
        return _place_and_route.PlacementCellGroups_begin(self)

    def end(self):
        return _place_and_route.PlacementCellGroups_end(self)

    def rbegin(self):
        return _place_and_route.PlacementCellGroups_rbegin(self)

    def rend(self):
        return _place_and_route.PlacementCellGroups_rend(self)

    def clear(self):
        return _place_and_route.PlacementCellGroups_clear(self)

    def get_allocator(self):
        return _place_and_route.PlacementCellGroups_get_allocator(self)

    def pop_back(self):
        return _place_and_route.PlacementCellGroups_pop_back(self)

    def erase(self, *args):
        return _place_and_route.PlacementCellGroups_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.PlacementCellGroups_swiginit(
            self, _place_and_route.new_PlacementCellGroups(*args)
        )

    def push_back(self, x):
        return _place_and_route.PlacementCellGroups_push_back(self, x)

    def front(self):
        return _place_and_route.PlacementCellGroups_front(self)

    def back(self):
        return _place_and_route.PlacementCellGroups_back(self)

    def assign(self, n, x):
        return _place_and_route.PlacementCellGroups_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.PlacementCellGroups_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.PlacementCellGroups_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.PlacementCellGroups_reserve(self, n)

    def capacity(self):
        return _place_and_route.PlacementCellGroups_capacity(self)

    __swig_destroy__ = _place_and_route.delete_PlacementCellGroups


# Register PlacementCellGroups in _place_and_route:
_place_and_route.PlacementCellGroups_swigregister(PlacementCellGroups)


class ConstraintVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.ConstraintVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.ConstraintVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.ConstraintVector___bool__(self)

    def __len__(self):
        return _place_and_route.ConstraintVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.ConstraintVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.ConstraintVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.ConstraintVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.ConstraintVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.ConstraintVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.ConstraintVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.ConstraintVector_pop(self)

    def append(self, x):
        return _place_and_route.ConstraintVector_append(self, x)

    def empty(self):
        return _place_and_route.ConstraintVector_empty(self)

    def size(self):
        return _place_and_route.ConstraintVector_size(self)

    def swap(self, v):
        return _place_and_route.ConstraintVector_swap(self, v)

    def begin(self):
        return _place_and_route.ConstraintVector_begin(self)

    def end(self):
        return _place_and_route.ConstraintVector_end(self)

    def rbegin(self):
        return _place_and_route.ConstraintVector_rbegin(self)

    def rend(self):
        return _place_and_route.ConstraintVector_rend(self)

    def clear(self):
        return _place_and_route.ConstraintVector_clear(self)

    def get_allocator(self):
        return _place_and_route.ConstraintVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.ConstraintVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.ConstraintVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.ConstraintVector_swiginit(
            self, _place_and_route.new_ConstraintVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.ConstraintVector_push_back(self, x)

    def front(self):
        return _place_and_route.ConstraintVector_front(self)

    def back(self):
        return _place_and_route.ConstraintVector_back(self)

    def assign(self, n, x):
        return _place_and_route.ConstraintVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.ConstraintVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.ConstraintVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.ConstraintVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.ConstraintVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_ConstraintVector


# Register ConstraintVector in _place_and_route:
_place_and_route.ConstraintVector_swigregister(ConstraintVector)


class NetVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.NetVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.NetVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.NetVector___bool__(self)

    def __len__(self):
        return _place_and_route.NetVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.NetVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.NetVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.NetVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.NetVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.NetVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.NetVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.NetVector_pop(self)

    def append(self, x):
        return _place_and_route.NetVector_append(self, x)

    def empty(self):
        return _place_and_route.NetVector_empty(self)

    def size(self):
        return _place_and_route.NetVector_size(self)

    def swap(self, v):
        return _place_and_route.NetVector_swap(self, v)

    def begin(self):
        return _place_and_route.NetVector_begin(self)

    def end(self):
        return _place_and_route.NetVector_end(self)

    def rbegin(self):
        return _place_and_route.NetVector_rbegin(self)

    def rend(self):
        return _place_and_route.NetVector_rend(self)

    def clear(self):
        return _place_and_route.NetVector_clear(self)

    def get_allocator(self):
        return _place_and_route.NetVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.NetVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.NetVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.NetVector_swiginit(self, _place_and_route.new_NetVector(*args))

    def push_back(self, x):
        return _place_and_route.NetVector_push_back(self, x)

    def front(self):
        return _place_and_route.NetVector_front(self)

    def back(self):
        return _place_and_route.NetVector_back(self)

    def assign(self, n, x):
        return _place_and_route.NetVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.NetVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.NetVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.NetVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.NetVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_NetVector


# Register NetVector in _place_and_route:
_place_and_route.NetVector_swigregister(NetVector)


class OrientationMap(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.OrientationMap_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.OrientationMap___nonzero__(self)

    def __bool__(self):
        return _place_and_route.OrientationMap___bool__(self)

    def __len__(self):
        return _place_and_route.OrientationMap___len__(self)

    def __iter__(self):
        return self.key_iterator()

    def iterkeys(self):
        return self.key_iterator()

    def itervalues(self):
        return self.value_iterator()

    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _place_and_route.OrientationMap___getitem__(self, key)

    def __delitem__(self, key):
        return _place_and_route.OrientationMap___delitem__(self, key)

    def has_key(self, key):
        return _place_and_route.OrientationMap_has_key(self, key)

    def keys(self):
        return _place_and_route.OrientationMap_keys(self)

    def values(self):
        return _place_and_route.OrientationMap_values(self)

    def items(self):
        return _place_and_route.OrientationMap_items(self)

    def __contains__(self, key):
        return _place_and_route.OrientationMap___contains__(self, key)

    def key_iterator(self):
        return _place_and_route.OrientationMap_key_iterator(self)

    def value_iterator(self):
        return _place_and_route.OrientationMap_value_iterator(self)

    def __setitem__(self, *args):
        return _place_and_route.OrientationMap___setitem__(self, *args)

    def asdict(self):
        return _place_and_route.OrientationMap_asdict(self)

    def __init__(self, *args):
        _place_and_route.OrientationMap_swiginit(
            self, _place_and_route.new_OrientationMap(*args)
        )

    def empty(self):
        return _place_and_route.OrientationMap_empty(self)

    def size(self):
        return _place_and_route.OrientationMap_size(self)

    def swap(self, v):
        return _place_and_route.OrientationMap_swap(self, v)

    def begin(self):
        return _place_and_route.OrientationMap_begin(self)

    def end(self):
        return _place_and_route.OrientationMap_end(self)

    def rbegin(self):
        return _place_and_route.OrientationMap_rbegin(self)

    def rend(self):
        return _place_and_route.OrientationMap_rend(self)

    def clear(self):
        return _place_and_route.OrientationMap_clear(self)

    def get_allocator(self):
        return _place_and_route.OrientationMap_get_allocator(self)

    def count(self, x):
        return _place_and_route.OrientationMap_count(self, x)

    def erase(self, *args):
        return _place_and_route.OrientationMap_erase(self, *args)

    def find(self, x):
        return _place_and_route.OrientationMap_find(self, x)

    def lower_bound(self, x):
        return _place_and_route.OrientationMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _place_and_route.OrientationMap_upper_bound(self, x)

    __swig_destroy__ = _place_and_route.delete_OrientationMap


# Register OrientationMap in _place_and_route:
_place_and_route.OrientationMap_swigregister(OrientationMap)


class SinksVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.SinksVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.SinksVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.SinksVector___bool__(self)

    def __len__(self):
        return _place_and_route.SinksVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.SinksVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.SinksVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.SinksVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.SinksVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.SinksVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.SinksVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.SinksVector_pop(self)

    def append(self, x):
        return _place_and_route.SinksVector_append(self, x)

    def empty(self):
        return _place_and_route.SinksVector_empty(self)

    def size(self):
        return _place_and_route.SinksVector_size(self)

    def swap(self, v):
        return _place_and_route.SinksVector_swap(self, v)

    def begin(self):
        return _place_and_route.SinksVector_begin(self)

    def end(self):
        return _place_and_route.SinksVector_end(self)

    def rbegin(self):
        return _place_and_route.SinksVector_rbegin(self)

    def rend(self):
        return _place_and_route.SinksVector_rend(self)

    def clear(self):
        return _place_and_route.SinksVector_clear(self)

    def get_allocator(self):
        return _place_and_route.SinksVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.SinksVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.SinksVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.SinksVector_swiginit(
            self, _place_and_route.new_SinksVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.SinksVector_push_back(self, x)

    def front(self):
        return _place_and_route.SinksVector_front(self)

    def back(self):
        return _place_and_route.SinksVector_back(self)

    def assign(self, n, x):
        return _place_and_route.SinksVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.SinksVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.SinksVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.SinksVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.SinksVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_SinksVector


# Register SinksVector in _place_and_route:
_place_and_route.SinksVector_swigregister(SinksVector)


class MirrorGroupsVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.MirrorGroupsVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.MirrorGroupsVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.MirrorGroupsVector___bool__(self)

    def __len__(self):
        return _place_and_route.MirrorGroupsVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.MirrorGroupsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.MirrorGroupsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.MirrorGroupsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.MirrorGroupsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.MirrorGroupsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.MirrorGroupsVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.MirrorGroupsVector_pop(self)

    def append(self, x):
        return _place_and_route.MirrorGroupsVector_append(self, x)

    def empty(self):
        return _place_and_route.MirrorGroupsVector_empty(self)

    def size(self):
        return _place_and_route.MirrorGroupsVector_size(self)

    def swap(self, v):
        return _place_and_route.MirrorGroupsVector_swap(self, v)

    def begin(self):
        return _place_and_route.MirrorGroupsVector_begin(self)

    def end(self):
        return _place_and_route.MirrorGroupsVector_end(self)

    def rbegin(self):
        return _place_and_route.MirrorGroupsVector_rbegin(self)

    def rend(self):
        return _place_and_route.MirrorGroupsVector_rend(self)

    def clear(self):
        return _place_and_route.MirrorGroupsVector_clear(self)

    def get_allocator(self):
        return _place_and_route.MirrorGroupsVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.MirrorGroupsVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.MirrorGroupsVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.MirrorGroupsVector_swiginit(
            self, _place_and_route.new_MirrorGroupsVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.MirrorGroupsVector_push_back(self, x)

    def front(self):
        return _place_and_route.MirrorGroupsVector_front(self)

    def back(self):
        return _place_and_route.MirrorGroupsVector_back(self)

    def assign(self, n, x):
        return _place_and_route.MirrorGroupsVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.MirrorGroupsVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.MirrorGroupsVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.MirrorGroupsVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.MirrorGroupsVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_MirrorGroupsVector


# Register MirrorGroupsVector in _place_and_route:
_place_and_route.MirrorGroupsVector_swigregister(MirrorGroupsVector)

ConstraintType_POSITION = _place_and_route.ConstraintType_POSITION
ConstraintType_ROTATION = _place_and_route.ConstraintType_ROTATION
ConstraintType_ORIENTATION = _place_and_route.ConstraintType_ORIENTATION
ConstraintType_LENGTH = _place_and_route.ConstraintType_LENGTH
ConstraintType_ORTHOGONAL = _place_and_route.ConstraintType_ORTHOGONAL
ConstraintType_ARRAY = _place_and_route.ConstraintType_ARRAY
ConstraintType_MIRROR = _place_and_route.ConstraintType_MIRROR
ConstraintType_RADIAL = _place_and_route.ConstraintType_RADIAL
Orientation_HORIZONTAL = _place_and_route.Orientation_HORIZONTAL
Orientation_VERTICAL = _place_and_route.Orientation_VERTICAL


class Terminal(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _place_and_route.Terminal_swiginit(self, _place_and_route.new_Terminal(*args))

    __swig_destroy__ = _place_and_route.delete_Terminal
    label = property(
        _place_and_route.Terminal_label_get, _place_and_route.Terminal_label_set
    )
    x = property(_place_and_route.Terminal_x_get, _place_and_route.Terminal_x_set)
    y = property(_place_and_route.Terminal_y_get, _place_and_route.Terminal_y_set)
    rel_x = property(
        _place_and_route.Terminal_rel_x_get, _place_and_route.Terminal_rel_x_set
    )
    rel_y = property(
        _place_and_route.Terminal_rel_y_get, _place_and_route.Terminal_rel_y_set
    )
    con_to_cer = property(
        _place_and_route.Terminal_con_to_cer_get,
        _place_and_route.Terminal_con_to_cer_set,
    )

    def compute_absolute_positions(self, ref_x, ref_y):
        return _place_and_route.Terminal_compute_absolute_positions(self, ref_x, ref_y)


# Register Terminal in _place_and_route:
_place_and_route.Terminal_swigregister(Terminal)


class PlacementCell(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _place_and_route.PlacementCell_swiginit(
            self, _place_and_route.new_PlacementCell(*args)
        )

    __swig_destroy__ = _place_and_route.delete_PlacementCell
    id = property(
        _place_and_route.PlacementCell_id_get, _place_and_route.PlacementCell_id_set
    )
    x = property(
        _place_and_route.PlacementCell_x_get, _place_and_route.PlacementCell_x_set
    )
    y = property(
        _place_and_route.PlacementCell_y_get, _place_and_route.PlacementCell_y_set
    )
    rotation = property(
        _place_and_route.PlacementCell_rotation_get,
        _place_and_route.PlacementCell_rotation_set,
    )
    x_span = property(
        _place_and_route.PlacementCell_x_span_get,
        _place_and_route.PlacementCell_x_span_set,
    )
    y_span = property(
        _place_and_route.PlacementCell_y_span_get,
        _place_and_route.PlacementCell_y_span_set,
    )
    component_spacing = property(
        _place_and_route.PlacementCell_component_spacing_get,
        _place_and_route.PlacementCell_component_spacing_set,
    )
    ports = property(
        _place_and_route.PlacementCell_ports_get,
        _place_and_route.PlacementCell_ports_set,
    )
    lock_x = property(
        _place_and_route.PlacementCell_lock_x_get,
        _place_and_route.PlacementCell_lock_x_set,
    )
    lock_y = property(
        _place_and_route.PlacementCell_lock_y_get,
        _place_and_route.PlacementCell_lock_y_set,
    )
    lock_rotation = property(
        _place_and_route.PlacementCell_lock_rotation_get,
        _place_and_route.PlacementCell_lock_rotation_set,
    )

    def __lt__(self, ob):
        return _place_and_route.PlacementCell___lt__(self, ob)


# Register PlacementCell in _place_and_route:
_place_and_route.PlacementCell_swigregister(PlacementCell)


class Net(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _place_and_route.Net_swiginit(self, _place_and_route.new_Net(*args))

    __swig_destroy__ = _place_and_route.delete_Net
    id = property(_place_and_route.Net_id_get, _place_and_route.Net_id_set)
    source = property(_place_and_route.Net_source_get, _place_and_route.Net_source_set)
    source_terminal = property(
        _place_and_route.Net_source_terminal_get,
        _place_and_route.Net_source_terminal_set,
    )
    channelSpacing = property(
        _place_and_route.Net_channelSpacing_get, _place_and_route.Net_channelSpacing_set
    )
    channelWidth = property(
        _place_and_route.Net_channelWidth_get, _place_and_route.Net_channelWidth_set
    )
    sinks = property(_place_and_route.Net_sinks_get, _place_and_route.Net_sinks_set)
    sink_terminals = property(
        _place_and_route.Net_sink_terminals_get, _place_and_route.Net_sink_terminals_set
    )
    routes = property(_place_and_route.Net_routes_get, _place_and_route.Net_routes_set)


# Register Net in _place_and_route:
_place_and_route.Net_swigregister(Net)


class Constraint(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self):
        _place_and_route.Constraint_swiginit(self, _place_and_route.new_Constraint())

    __swig_destroy__ = _place_and_route.delete_Constraint
    type = property(
        _place_and_route.Constraint_type_get, _place_and_route.Constraint_type_set
    )


# Register Constraint in _place_and_route:
_place_and_route.Constraint_swigregister(Constraint)


class PositionConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, x, y, cell):
        _place_and_route.PositionConstraint_swiginit(
            self, _place_and_route.new_PositionConstraint(x, y, cell)
        )

    __swig_destroy__ = _place_and_route.delete_PositionConstraint
    xpos = property(
        _place_and_route.PositionConstraint_xpos_get,
        _place_and_route.PositionConstraint_xpos_set,
    )
    ypos = property(
        _place_and_route.PositionConstraint_ypos_get,
        _place_and_route.PositionConstraint_ypos_set,
    )
    cell = property(
        _place_and_route.PositionConstraint_cell_get,
        _place_and_route.PositionConstraint_cell_set,
    )


# Register PositionConstraint in _place_and_route:
_place_and_route.PositionConstraint_swigregister(PositionConstraint)


class RotationConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, rotation, cell):
        _place_and_route.RotationConstraint_swiginit(
            self, _place_and_route.new_RotationConstraint(rotation, cell)
        )

    __swig_destroy__ = _place_and_route.delete_RotationConstraint
    rotation = property(
        _place_and_route.RotationConstraint_rotation_get,
        _place_and_route.RotationConstraint_rotation_set,
    )
    cell = property(
        _place_and_route.RotationConstraint_cell_get,
        _place_and_route.RotationConstraint_cell_set,
    )


# Register RotationConstraint in _place_and_route:
_place_and_route.RotationConstraint_swigregister(RotationConstraint)


class OrientationConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, orientations):
        _place_and_route.OrientationConstraint_swiginit(
            self, _place_and_route.new_OrientationConstraint(orientations)
        )

    __swig_destroy__ = _place_and_route.delete_OrientationConstraint
    orientations = property(
        _place_and_route.OrientationConstraint_orientations_get,
        _place_and_route.OrientationConstraint_orientations_set,
    )


# Register OrientationConstraint in _place_and_route:
_place_and_route.OrientationConstraint_swigregister(OrientationConstraint)


class LengthConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, net, source_id, sink_id, length):
        _place_and_route.LengthConstraint_swiginit(
            self, _place_and_route.new_LengthConstraint(net, source_id, sink_id, length)
        )

    __swig_destroy__ = _place_and_route.delete_LengthConstraint
    net = property(
        _place_and_route.LengthConstraint_net_get,
        _place_and_route.LengthConstraint_net_set,
    )
    source_id = property(
        _place_and_route.LengthConstraint_source_id_get,
        _place_and_route.LengthConstraint_source_id_set,
    )
    sink_id = property(
        _place_and_route.LengthConstraint_sink_id_get,
        _place_and_route.LengthConstraint_sink_id_set,
    )
    length = property(
        _place_and_route.LengthConstraint_length_get,
        _place_and_route.LengthConstraint_length_set,
    )


# Register LengthConstraint in _place_and_route:
_place_and_route.LengthConstraint_swigregister(LengthConstraint)


class OrthogonalConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, cells):
        _place_and_route.OrthogonalConstraint_swiginit(
            self, _place_and_route.new_OrthogonalConstraint(cells)
        )

    __swig_destroy__ = _place_and_route.delete_OrthogonalConstraint
    cells = property(
        _place_and_route.OrthogonalConstraint_cells_get,
        _place_and_route.OrthogonalConstraint_cells_set,
    )


# Register OrthogonalConstraint in _place_and_route:
_place_and_route.OrthogonalConstraint_swigregister(OrthogonalConstraint)


class ArrayConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, xdim, ydim, cells):
        _place_and_route.ArrayConstraint_swiginit(
            self, _place_and_route.new_ArrayConstraint(xdim, ydim, cells)
        )

    __swig_destroy__ = _place_and_route.delete_ArrayConstraint
    xdim = property(
        _place_and_route.ArrayConstraint_xdim_get,
        _place_and_route.ArrayConstraint_xdim_set,
    )
    ydim = property(
        _place_and_route.ArrayConstraint_ydim_get,
        _place_and_route.ArrayConstraint_ydim_set,
    )
    cells = property(
        _place_and_route.ArrayConstraint_cells_get,
        _place_and_route.ArrayConstraint_cells_set,
    )


# Register ArrayConstraint in _place_and_route:
_place_and_route.ArrayConstraint_swigregister(ArrayConstraint)


class MirrorConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, groups):
        _place_and_route.MirrorConstraint_swiginit(
            self, _place_and_route.new_MirrorConstraint(groups)
        )

    __swig_destroy__ = _place_and_route.delete_MirrorConstraint
    groups = property(
        _place_and_route.MirrorConstraint_groups_get,
        _place_and_route.MirrorConstraint_groups_set,
    )


# Register MirrorConstraint in _place_and_route:
_place_and_route.MirrorConstraint_swigregister(MirrorConstraint)


class RadialConstraint(Constraint):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, groups, center):
        _place_and_route.RadialConstraint_swiginit(
            self, _place_and_route.new_RadialConstraint(groups, center)
        )

    __swig_destroy__ = _place_and_route.delete_RadialConstraint
    groups = property(
        _place_and_route.RadialConstraint_groups_get,
        _place_and_route.RadialConstraint_groups_set,
    )
    center = property(
        _place_and_route.RadialConstraint_center_get,
        _place_and_route.RadialConstraint_center_set,
    )


# Register RadialConstraint in _place_and_route:
_place_and_route.RadialConstraint_swigregister(RadialConstraint)


class Placer(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _place_and_route.Placer_swiginit(self, _place_and_route.new_Placer(*args))

    __swig_destroy__ = _place_and_route.delete_Placer
    cells = property(
        _place_and_route.Placer_cells_get, _place_and_route.Placer_cells_set
    )
    nets = property(_place_and_route.Placer_nets_get, _place_and_route.Placer_nets_set)
    constraints = property(
        _place_and_route.Placer_constraints_get, _place_and_route.Placer_constraints_set
    )

    def place(self, max_x, max_y):
        return _place_and_route.Placer_place(self, max_x, max_y)

    def place_and_route(self):
        return _place_and_route.Placer_place_and_route(self)


# Register Placer in _place_and_route:
_place_and_route.Placer_swigregister(Placer)


class VertexVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.VertexVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.VertexVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.VertexVector___bool__(self)

    def __len__(self):
        return _place_and_route.VertexVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.VertexVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.VertexVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.VertexVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.VertexVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.VertexVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.VertexVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.VertexVector_pop(self)

    def append(self, x):
        return _place_and_route.VertexVector_append(self, x)

    def empty(self):
        return _place_and_route.VertexVector_empty(self)

    def size(self):
        return _place_and_route.VertexVector_size(self)

    def swap(self, v):
        return _place_and_route.VertexVector_swap(self, v)

    def begin(self):
        return _place_and_route.VertexVector_begin(self)

    def end(self):
        return _place_and_route.VertexVector_end(self)

    def rbegin(self):
        return _place_and_route.VertexVector_rbegin(self)

    def rend(self):
        return _place_and_route.VertexVector_rend(self)

    def clear(self):
        return _place_and_route.VertexVector_clear(self)

    def get_allocator(self):
        return _place_and_route.VertexVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.VertexVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.VertexVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.VertexVector_swiginit(
            self, _place_and_route.new_VertexVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.VertexVector_push_back(self, x)

    def front(self):
        return _place_and_route.VertexVector_front(self)

    def back(self):
        return _place_and_route.VertexVector_back(self)

    def assign(self, n, x):
        return _place_and_route.VertexVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.VertexVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.VertexVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.VertexVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.VertexVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_VertexVector


# Register VertexVector in _place_and_route:
_place_and_route.VertexVector_swigregister(VertexVector)


class RouteVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.RouteVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.RouteVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.RouteVector___bool__(self)

    def __len__(self):
        return _place_and_route.RouteVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.RouteVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.RouteVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.RouteVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.RouteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.RouteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.RouteVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.RouteVector_pop(self)

    def append(self, x):
        return _place_and_route.RouteVector_append(self, x)

    def empty(self):
        return _place_and_route.RouteVector_empty(self)

    def size(self):
        return _place_and_route.RouteVector_size(self)

    def swap(self, v):
        return _place_and_route.RouteVector_swap(self, v)

    def begin(self):
        return _place_and_route.RouteVector_begin(self)

    def end(self):
        return _place_and_route.RouteVector_end(self)

    def rbegin(self):
        return _place_and_route.RouteVector_rbegin(self)

    def rend(self):
        return _place_and_route.RouteVector_rend(self)

    def clear(self):
        return _place_and_route.RouteVector_clear(self)

    def get_allocator(self):
        return _place_and_route.RouteVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.RouteVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.RouteVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.RouteVector_swiginit(
            self, _place_and_route.new_RouteVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.RouteVector_push_back(self, x)

    def front(self):
        return _place_and_route.RouteVector_front(self)

    def back(self):
        return _place_and_route.RouteVector_back(self)

    def assign(self, n, x):
        return _place_and_route.RouteVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.RouteVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.RouteVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.RouteVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.RouteVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_RouteVector


# Register RouteVector in _place_and_route:
_place_and_route.RouteVector_swigregister(RouteVector)


class RoutePointerVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.RoutePointerVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.RoutePointerVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.RoutePointerVector___bool__(self)

    def __len__(self):
        return _place_and_route.RoutePointerVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.RoutePointerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.RoutePointerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.RoutePointerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.RoutePointerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.RoutePointerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.RoutePointerVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.RoutePointerVector_pop(self)

    def append(self, x):
        return _place_and_route.RoutePointerVector_append(self, x)

    def empty(self):
        return _place_and_route.RoutePointerVector_empty(self)

    def size(self):
        return _place_and_route.RoutePointerVector_size(self)

    def swap(self, v):
        return _place_and_route.RoutePointerVector_swap(self, v)

    def begin(self):
        return _place_and_route.RoutePointerVector_begin(self)

    def end(self):
        return _place_and_route.RoutePointerVector_end(self)

    def rbegin(self):
        return _place_and_route.RoutePointerVector_rbegin(self)

    def rend(self):
        return _place_and_route.RoutePointerVector_rend(self)

    def clear(self):
        return _place_and_route.RoutePointerVector_clear(self)

    def get_allocator(self):
        return _place_and_route.RoutePointerVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.RoutePointerVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.RoutePointerVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.RoutePointerVector_swiginit(
            self, _place_and_route.new_RoutePointerVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.RoutePointerVector_push_back(self, x)

    def front(self):
        return _place_and_route.RoutePointerVector_front(self)

    def back(self):
        return _place_and_route.RoutePointerVector_back(self)

    def assign(self, n, x):
        return _place_and_route.RoutePointerVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.RoutePointerVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.RoutePointerVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.RoutePointerVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.RoutePointerVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_RoutePointerVector


# Register RoutePointerVector in _place_and_route:
_place_and_route.RoutePointerVector_swigregister(RoutePointerVector)


class CellVector(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _place_and_route.CellVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _place_and_route.CellVector___nonzero__(self)

    def __bool__(self):
        return _place_and_route.CellVector___bool__(self)

    def __len__(self):
        return _place_and_route.CellVector___len__(self)

    def __getslice__(self, i, j):
        return _place_and_route.CellVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _place_and_route.CellVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _place_and_route.CellVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _place_and_route.CellVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _place_and_route.CellVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _place_and_route.CellVector___setitem__(self, *args)

    def pop(self):
        return _place_and_route.CellVector_pop(self)

    def append(self, x):
        return _place_and_route.CellVector_append(self, x)

    def empty(self):
        return _place_and_route.CellVector_empty(self)

    def size(self):
        return _place_and_route.CellVector_size(self)

    def swap(self, v):
        return _place_and_route.CellVector_swap(self, v)

    def begin(self):
        return _place_and_route.CellVector_begin(self)

    def end(self):
        return _place_and_route.CellVector_end(self)

    def rbegin(self):
        return _place_and_route.CellVector_rbegin(self)

    def rend(self):
        return _place_and_route.CellVector_rend(self)

    def clear(self):
        return _place_and_route.CellVector_clear(self)

    def get_allocator(self):
        return _place_and_route.CellVector_get_allocator(self)

    def pop_back(self):
        return _place_and_route.CellVector_pop_back(self)

    def erase(self, *args):
        return _place_and_route.CellVector_erase(self, *args)

    def __init__(self, *args):
        _place_and_route.CellVector_swiginit(
            self, _place_and_route.new_CellVector(*args)
        )

    def push_back(self, x):
        return _place_and_route.CellVector_push_back(self, x)

    def front(self):
        return _place_and_route.CellVector_front(self)

    def back(self):
        return _place_and_route.CellVector_back(self)

    def assign(self, n, x):
        return _place_and_route.CellVector_assign(self, n, x)

    def resize(self, *args):
        return _place_and_route.CellVector_resize(self, *args)

    def insert(self, *args):
        return _place_and_route.CellVector_insert(self, *args)

    def reserve(self, n):
        return _place_and_route.CellVector_reserve(self, n)

    def capacity(self):
        return _place_and_route.CellVector_capacity(self)

    __swig_destroy__ = _place_and_route.delete_CellVector


# Register CellVector in _place_and_route:
_place_and_route.CellVector_swigregister(CellVector)


class Vertex(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr
    x = property(_place_and_route.Vertex_x_get, _place_and_route.Vertex_x_set)
    y = property(_place_and_route.Vertex_y_get, _place_and_route.Vertex_y_set)

    def __init__(self):
        _place_and_route.Vertex_swiginit(self, _place_and_route.new_Vertex())

    __swig_destroy__ = _place_and_route.delete_Vertex


# Register Vertex in _place_and_route:
_place_and_route.Vertex_swigregister(Vertex)


class Route(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _place_and_route.Route_swiginit(self, _place_and_route.new_Route(*args))

    __swig_destroy__ = _place_and_route.delete_Route
    id = property(_place_and_route.Route_id_get, _place_and_route.Route_id_set)
    start = property(_place_and_route.Route_start_get, _place_and_route.Route_start_set)
    end = property(_place_and_route.Route_end_get, _place_and_route.Route_end_set)
    channelWidth = property(
        _place_and_route.Route_channelWidth_get, _place_and_route.Route_channelWidth_set
    )
    channelSpacing = property(
        _place_and_route.Route_channelSpacing_get,
        _place_and_route.Route_channelSpacing_set,
    )
    waypoints = property(
        _place_and_route.Route_waypoints_get, _place_and_route.Route_waypoints_set
    )

    def getWaypoints(self):
        return _place_and_route.Route_getWaypoints(self)


# Register Route in _place_and_route:
_place_and_route.Route_swigregister(Route)


class Cell(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr
    x = property(_place_and_route.Cell_x_get, _place_and_route.Cell_x_set)
    y = property(_place_and_route.Cell_y_get, _place_and_route.Cell_y_set)
    x_span = property(
        _place_and_route.Cell_x_span_get, _place_and_route.Cell_x_span_set
    )
    y_span = property(
        _place_and_route.Cell_y_span_get, _place_and_route.Cell_y_span_set
    )

    def __init__(self):
        _place_and_route.Cell_swiginit(self, _place_and_route.new_Cell())

    __swig_destroy__ = _place_and_route.delete_Cell


# Register Cell in _place_and_route:
_place_and_route.Cell_swigregister(Cell)


class Router(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, obstacles):
        _place_and_route.Router_swiginit(self, _place_and_route.new_Router(obstacles))

    __swig_destroy__ = _place_and_route.delete_Router
    obstacles = property(
        _place_and_route.Router_obstacles_get, _place_and_route.Router_obstacles_set
    )

    def route(self, routes, min_x, min_y, max_x, max_y):
        return _place_and_route.Router_route(self, routes, min_x, min_y, max_x, max_y)


# Register Router in _place_and_route:
_place_and_route.Router_swigregister(Router)
